package scala2protobuf.descriptor

import java.time.{Clock, Instant, ZoneOffset}

package object protobuf {

  private val lineSeparator = System.lineSeparator

  case class File(filename: String,
                  syntax: Syntax,
                  pkg: Package,
                  options: FileOptions,
                  messages: Seq[Message],
                  services: Seq[Service],
                  lastModified: Long) {
    def toProto(implicit clock: Clock): String = {
      val imports = messages
        .flatMap(_.fields.map(_.tpe.imports))
        .flatten
        .map(externalProto => s"""import "$externalProto";""")
        .mkString(lineSeparator)
      val servicesProto = services match {
        case Nil => ""
        case list =>
          list.map(_.toProto).mkString(lineSeparator)
      }
      val messagesProto = messages match {
        case Nil => ""
        case list =>
          list.map(_.toProto).mkString(lineSeparator)
      }
      s"""|// Generated by scala2protobuf at ${Instant
           .now(clock)
           .atOffset(ZoneOffset.UTC)}[UTC]
          |syntax = "${syntax.text}";
          |${options.toProto}
          |$imports
          |package ${pkg.name};
          |$servicesProto
          |$messagesProto
          |""".stripMargin
    }
  }

  sealed abstract class Syntax(val text: String)

  object Syntax {
    // object PROTO2 extends Syntax("proto2")
    object PROTO3 extends Syntax("proto3")
  }

  case class FileOptions(
      javaPackage: String,
      javaOuterClassName: String,
      javaMultipleFiles: Boolean = false,
      javaGenerateEqualsAndHash: Option[Boolean] = None,
      javaStringCheckUtf8: Option[Boolean] = None,
      optimizeFor: Option[Int] = None,
      goPackage: Option[String] = None,
      ccGenericServices: Option[Boolean] = None,
      javaGenericServices: Option[Boolean] = None,
      pyGenericServices: Option[Boolean] = None,
      phpGenericServices: Option[Boolean] = None,
      deprecated: Option[Boolean] = None,
      ccEnableArenas: Option[Boolean] = None,
      objcClassPrefix: Option[String] = None,
      csharpNamespace: Option[String] = None,
      swiftPrefix: Option[String] = None,
      phpClassPrefix: Option[String] = None,
      phpNamespace: Option[String] = None,
      uninterpretedOption: List[Nothing] = Nil
  ) {
    def toProto: String = {
      s"""|option java_multiple_files = $javaMultipleFiles;
          |option java_package = "$javaPackage";
          |option java_outer_classname = "$javaOuterClassName";""".stripMargin
    }
  }
  object FileOptions {
    def generate[T](f: T => FileOptions, parameter: T): FileOptions =
      f(parameter)
  }

  case class Package(name: String)
  object Package {
    def generate[T](f: T => Package, parameter: T): Package =
      f(parameter)
  }

  sealed abstract class Type(val text: String,
                             val imports: Option[String] = None)

  object Type {
    case object DOUBLE extends Type("double")
    case object FLOAT extends Type("float")
    case object INT64 extends Type("int64")
    case object INT32 extends Type("int32")
    case object UINT64 extends Type("uint64")
    case object FIXED64 extends Type("fixed64")
    case object BOOL extends Type("bool")
    case object STRING extends Type("string")
    case class GROUP(override val text: String) extends Type(text)
    case class MESSAGE(override val text: String) extends Type(text)
    case object BYTES extends Type("bytes")
    case object UINT32 extends Type("uint32")
    case class ENUM_OR_MESSAGE(override val text: String) extends Type(text)
    case object SFIXED32 extends Type("sfixed32")
    case object SFIXED64 extends Type("sfixed64")
    case object SINT32 extends Type("sint32")
    case object SINT64 extends Type("sint64")
    case object TIMESTAMP
        extends Type("google.protobuf.Timestamp",
                     imports = Some("google/protobuf/timestamp.proto"))
  }

  case class Field(isOptional: Boolean,
                   isRepeated: Boolean,
                   tpe: Type,
                   name: String,
                   number: Int) {
    def toProto: String =
      s"${if (isOptional) "optional " else ""}${if (isRepeated) "repeated "
      else ""}${tpe.text} $name = $number;"
  }

  case class Message(name: String, fields: Seq[Field]) {
    def toProto: String =
      s"""|message $name {
          |  ${fields.map(_.toProto).mkString(lineSeparator ++ "  ")}
          |}""".stripMargin
  }

  // TODO:
  case class Enum(Values: Seq[String])
  // if enum option allow_alias = true;

  case class Method(name: String,
                    isStreamInput: Boolean,
                    inputType: Type,
                    isStreamOutput: Boolean,
                    outputType: Type) {
    def toProto: String = {
      val stream = (isStream: Boolean) => if (isStream) "stream " else ""
      s"rpc $name (${stream(isStreamInput)}${inputType.text}) returns (${stream(
        isStreamOutput)}${outputType.text}) {}"
    }
  }

  case class Service(name: String, methods: Seq[Method]) {
    def toProto: String =
      s"""|service $name {
          |  ${methods.map(_.toProto).mkString(lineSeparator ++ "  ")}
          |}""".stripMargin
  }

}
